{
  "_args": [
    [
      {
        "raw": "xlsx2json@git+https://github.com/koalaylj/xlsx2json.git",
        "scope": null,
        "escapedName": "xlsx2json",
        "name": "xlsx2json",
        "rawSpec": "git+https://github.com/koalaylj/xlsx2json.git",
        "spec": "git+https://github.com/koalaylj/xlsx2json.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:koalaylj/xlsx2json.git",
          "sshUrl": "git+ssh://git@github.com/koalaylj/xlsx2json.git",
          "httpsUrl": "git+https://github.com/koalaylj/xlsx2json.git",
          "gitUrl": "git://github.com/koalaylj/xlsx2json.git",
          "shortcut": "github:koalaylj/xlsx2json",
          "directUrl": "https://raw.githubusercontent.com/koalaylj/xlsx2json/master/package.json"
        }
      },
      "D:\\NodeJS\\Protractor"
    ]
  ],
  "_from": "git+https://github.com/koalaylj/xlsx2json.git",
  "_id": "xlsx2json@0.2.0",
  "_inCache": true,
  "_location": "/xlsx2json",
  "_phantomChildren": {
    "inherits": "2.0.3",
    "lru-cache": "2.7.3",
    "sigmund": "1.0.1"
  },
  "_requested": {
    "raw": "xlsx2json@git+https://github.com/koalaylj/xlsx2json.git",
    "scope": null,
    "escapedName": "xlsx2json",
    "name": "xlsx2json",
    "rawSpec": "git+https://github.com/koalaylj/xlsx2json.git",
    "spec": "git+https://github.com/koalaylj/xlsx2json.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:koalaylj/xlsx2json.git",
      "sshUrl": "git+ssh://git@github.com/koalaylj/xlsx2json.git",
      "httpsUrl": "git+https://github.com/koalaylj/xlsx2json.git",
      "gitUrl": "git://github.com/koalaylj/xlsx2json.git",
      "shortcut": "github:koalaylj/xlsx2json",
      "directUrl": "https://raw.githubusercontent.com/koalaylj/xlsx2json/master/package.json"
    }
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "git+https://github.com/koalaylj/xlsx2json.git#34d699a72d7fa8f5ce79e027d3929b954392faf3",
  "_shasum": "7d346bce5456bca66c75999c8b68ca7639961464",
  "_shrinkwrap": null,
  "_spec": "xlsx2json@git+https://github.com/koalaylj/xlsx2json.git",
  "_where": "D:\\NodeJS\\Protractor",
  "author": {
    "name": "于小懒"
  },
  "bugs": {
    "url": "https://github.com/koalaylj/xlsx2json/issues"
  },
  "dependencies": {
    "glob": "3.2.9",
    "minimatch": "~0.2.14",
    "moment": "^2.10.2",
    "node-xlsx": "~0.4.0"
  },
  "description": "convert complex xlsx to json",
  "devDependencies": {
    "mocha": "^2.4.5"
  },
  "gitHead": "34d699a72d7fa8f5ce79e027d3929b954392faf3",
  "homepage": "https://github.com/koalaylj/xlsx2json",
  "keywords": [
    "xlsx",
    "excel",
    "json",
    "convert",
    "game developer",
    "mongo"
  ],
  "licenses": "MIT",
  "main": "index.js",
  "name": "xlsx2json",
  "optionalDependencies": {},
  "readme": "[![Build Status](https://travis-ci.org/koalaylj/xlsx2json.svg?branch=master)](https://travis-ci.org/koalaylj/xlsx2json)\nxlsx2json\n=========\n[English Document](./docs/doc_en.md)\n\n\n### 作用\n让excel表达复杂的json格式,将xlsx文件转成json。\n\n### npm相关\n* 如需当做npm模块引用请切换到`npm`分支。\n\n### 感谢\n某些想法也是借鉴了一个clojure的excel转json的开源项目 [excel-to-json ](https://github.com/mhaemmerle/excel-to-json)。\n\n\n### 使用说明\n> 目前只支持.xlsx格式，不支持.xls格式。\n\n* 本项目是基于nodejs的，所以需要先安装nodejs。\n* 配置config.json\n```json\n{\n    \"xlsx\": {\n        \"head\": 2,\t\t\t// 表头所在的行，第一行可以是注释，第二行是表头。\n        \"src\": \"./excel/**/[^~$]*.xlsx\", // xlsx文件 glob配置风格\n        \"dest\": \"./json\",\t //  导出的json存放的位置\n        \"arraySeparator\":\",\"  // 数组的分隔符\n    }\n}\n```\n* 执行`export.sh/export.bat`即可将`./excel/*.xlsx` 文件导成json并存放到 `./json` 下。json名字以excel的sheet名字命名。\n\n* 补充(一般用不上)：\n    * 执行`node index.js -h` 查看使用帮助。\n    * 命令行传参方式使用：执行 node `index.js --help` 查看。\n\n#### 示例1 test.xlsx\n| id   | desc         | flag   | nums#[] | words#[]    |   map#[]   | data#{}      | hero#[{}]                     |\n| ---- | -------------| ------ | ------- | ----------- | ---------- | ------------ | --------------------------    |\n| 123  | description  | true   | 1,2     | 哈哈,呵呵     | true,true  | a:123;b:45   | id:2;level:30,id:3;level:80  |\n| 456  | 描述          | false  | 3,5,8   | shit,my god | false,true | a:11;b:22    | id:9;level:38,id:17;level:100 |\n\n\n输出如下：\n\n```json\n[{\n    \"id\": 123,\n    \"desc\": \"description\",\n    \"flag\": true,\n    \"nums\": [1, 2],\n    \"words\": [\"哈哈\", \"呵呵\"],\n    \"map\": [true, true],\n    \"data\": {\n        \"a\": 123,\n        \"b\": 45\n    },\n    \"hero\": [\n      {\"id\": 2,\"level\": 30},\n      {\"id\": 3,\"level\": 80}\n    ]\n}, {\n    \"id\": 456,\n    \"desc\": \"描述\",\n    \"flag\": false,\n    \"nums\": [3, 5, 8],\n    \"words\": [\"shit\", \"my god\"],\n    \"map\": [false, true],\n    \"data\": {\n        \"a\": 11,\n        \"b\": 22\n    },\n    \"hero\": [\n      {\"id\": 9, \"level\": 38 },\n      {\"id\": 17,\"level\": 100}\n    ]\n}]\n```\n\n## 支持以下数据类型\n* number 数字类型\n* boolean  布尔\n* string 字符串\n* date 日期类型\n* object 对象，复杂的嵌套可以通过外键来实现，见“外键类型的sheet关联”\n* number-array  数字数组\n* boolean-array  布尔数组\n* string-array  字符串数组\n* object-array 对象数组，复杂的嵌套可以通过外键来实现，见“外键类型的sheet关联”\n\n## 表头规则\n* 基本数据类型(string,number,bool)时候，一般不需要设置会自动判断，但是也可以明确声明数据类型。\n* 字符串类型：此列表头的命名形式 `列名#string` 。\n* 数字类型：此列表头的命名形式 `列名#number` 。\n* 日期类型：`列名#date` 。格式`YYYY/M/D H:m:s` or `YYYY/M/D` or `YYYY-M-D H:m:s` or `YYYY-M-D`。（==注意：目前xlsx文件里面列必须设置为文本类型，如果是日期类型的话，会导致底层插件解析出来错误格式的时间==）.\n* 布尔类型：此列表头的命名形式 `列名#bool` 。\n* 基本类型数组：此列表头的命名形式 `列名#[]` 。\n* 对象：此列表头的命名形式 `列名#{}` 。\n* 对象数组：此列表头的命名形式`列名#[{}]` 。\n* id：此列表头的命名形式`列名#id`，用来生成对象格式的输出，以该列字段作为key，一个sheet中不能存在多个id类型的列，否则会被覆盖，相关用例请查看test/heroes.xlsx\n* id[]：此列表头的命名形式`列名#id[]`，用来约束输出的值为对象数组，相关用例请查看test/stages.xlsx\n\n## 数据规则\n* 关键符号都是半角符号。\n* 数组使用逗号`,`分割。\n* 对象属性使用分号`;`分割。\n* 列格式如果是日期，导出来的是格林尼治时间不是当时时区的时间，列设置成字符串可解决此问题。\n\n## 外键类型的sheet关联\n* sheet名称必须为【列名@sheet名称】，例如存在一个名称为a的sheet，会导出一个a.json，可以使用一个名称为b@a的sheet为这个json添加一个b的属性\n* 外键类型的sheet（sub sheet）顺序上必须位于被关联的sheet（master sheet）之后\n* master sheet的输出类型如果为对象，则sub sheet必须也存在master sheet同列名并且类型为id的列作为关联关系；master sheet的输出类型如果为数组，则sub sheet按照数组下标（行数）顺序关联\n* 相关用例请查看test/heroes.xlsx\n\n## 原理说明\n* 依赖 `node-xlsx` 这个项目解析xlsx文件。\n* xlsx就是个zip文件，解压出来都是xml。有一个xml存的string，有相应个xml存的sheet。通过解析xml解析出excel数据(json格式)，这个就是`node-xlsx` 做的工作。\n* 本项目只需利用 `node-xlsx` 解析xlsx文件，然后拼装自己的json数据格式。\n\n## 补充\n* windows/mac/linux都支持。\n* 项目地址 [xlsx2json master](https://github.com/koalaylj/xlsx2json)\n* 如有问题可以到QQ群内讨论：223460081\n* 项目中的某些工具函数测试用例请参见我的gist js:validate & js:convert。\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/koalaylj/xlsx2json.git"
  },
  "scripts": {
    "test": "mocha ./test/test.js"
  },
  "version": "0.2.0"
}
